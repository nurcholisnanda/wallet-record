// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	models "github.com/nurcholisnanda/wallet-record/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateRecord provides a mock function with given fields: record
func (_m *Service) CreateRecord(record *models.Record) error {
	ret := _m.Called(record)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Record) error); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHistory provides a mock function with given fields: start, end
func (_m *Service) GetHistory(start time.Time, end time.Time) ([]models.Record, error) {
	ret := _m.Called(start, end)

	var r0 []models.Record
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []models.Record); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatest provides a mock function with given fields:
func (_m *Service) GetLatest() (models.Record, error) {
	ret := _m.Called()

	var r0 models.Record
	if rf, ok := ret.Get(0).(func() models.Record); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Record)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
